import React, { useState, useRef, useEffect } from "react";
import {
  Send,
  Plus,
  MessageSquare,
  MoreVertical,
  Edit2,
  Trash2,
  Menu,
  X,
} from "lucide-react";

interface Message {
  id: number;
  text: string;
  sender: "user" | "ai";
  timestamp: Date;
}

interface Session {
  id: number;
  title: string;
  messages: Message[];
  createdAt: Date;
}

export default function Chat() {
  const [sessions, setSessions] = useState<Session[]>([
    { id: 1, title: "New Chat", messages: [], createdAt: new Date() },
  ]);
  const [currentSessionId, setCurrentSessionId] = useState<number>(1);
  const [inputMessage, setInputMessage] = useState<string>("");
  const [editingSessionId, setEditingSessionId] = useState<number | null>(null);
  const [editingTitle, setEditingTitle] = useState<string>("");
  const [showMenu, setShowMenu] = useState<number | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState<boolean>(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const currentSession = sessions.find((s) => s.id === currentSessionId);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [currentSession?.messages]);

  const handleSendMessage = (): void => {
    if (!inputMessage.trim()) return;

    const newMessage: Message = {
      id: Date.now(),
      text: inputMessage,
      sender: "user",
      timestamp: new Date(),
    };

    setSessions(
      sessions.map((session) => {
        if (session.id === currentSessionId) {
          const updatedMessages = [...session.messages, newMessage];

          // Simulate AI response
          setTimeout(() => {
            const aiResponse: Message = {
              id: Date.now() + 1,
              text: "This is a simulated AI response. In a real application, this would be generated by your AI model.",
              sender: "ai",
              timestamp: new Date(),
            };

            setSessions((prev) =>
              prev.map((s) =>
                s.id === currentSessionId
                  ? { ...s, messages: [...s.messages, aiResponse] }
                  : s,
              ),
            );
          }, 500);

          // Update session title if it's the first message
          const title =
            session.messages.length === 0
              ? inputMessage.slice(0, 30) +
                (inputMessage.length > 30 ? "..." : "")
              : session.title;

          return { ...session, messages: updatedMessages, title };
        }
        return session;
      }),
    );

    setInputMessage("");
  };

  const handleNewChat = (): void => {
    const newSession: Session = {
      id: Date.now(),
      title: "New Chat",
      messages: [],
      createdAt: new Date(),
    };
    setSessions([newSession, ...sessions]);
    setCurrentSessionId(newSession.id);
  };

  const handleDeleteSession = (sessionId: number): void => {
    if (sessions.length === 1) {
      const newSessionId = Date.now();
      setSessions([
        {
          id: newSessionId,
          title: "New Chat",
          messages: [],
          createdAt: new Date(),
        },
      ]);
      setCurrentSessionId(newSessionId);
    } else {
      setSessions(sessions.filter((s) => s.id !== sessionId));
      if (currentSessionId === sessionId) {
        const nextSession = sessions.find((s) => s.id !== sessionId);
        if (nextSession) {
          setCurrentSessionId(nextSession.id);
        }
      }
    }
    setShowMenu(null);
  };

  const handleRenameSession = (sessionId: number, newTitle: string): void => {
    setSessions(
      sessions.map((s) => (s.id === sessionId ? { ...s, title: newTitle } : s)),
    );
    setEditingSessionId(null);
  };

  const handleKeyPress = (
    e: React.KeyboardEvent<HTMLTextAreaElement>,
  ): void => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex h-screen" style={{ backgroundColor: "#F6EFD2" }}>
      {/* Sidebar */}
      <div
        className={`${sidebarOpen ? "w-64" : "w-0"} transition-all duration-300 text-white flex flex-col ${sidebarOpen ? "overflow-y-auto" : "overflow-hidden"}`}
        style={{ backgroundColor: "#000000" }}
      >
        <div
          className="p-4 shrink-0"
          style={{ borderBottom: "1px solid #333" }}
        >
          <button
            onClick={handleNewChat}
            className="w-full flex items-center gap-2 px-4 py-3 rounded-lg transition-colors whitespace-nowrap"
            style={{ backgroundColor: "#1a1a1a" }}
            onMouseEnter={(e) =>
              (e.currentTarget.style.backgroundColor = "#2a2a2a")
            }
            onMouseLeave={(e) =>
              (e.currentTarget.style.backgroundColor = "#1a1a1a")
            }
          >
            <Plus size={20} />
            <span>New Chat</span>
          </button>
        </div>

        <div className="flex-1 overflow-y-auto p-2 min-h-0">
          {sessions.map((session) => (
            <div
              key={session.id}
              className={`group relative mb-1 rounded-lg ${
                currentSessionId === session.id ? "" : ""
              }`}
              style={{
                backgroundColor:
                  currentSessionId === session.id ? "#1a1a1a" : "transparent",
              }}
              onMouseEnter={(e) => {
                if (currentSessionId !== session.id) {
                  e.currentTarget.style.backgroundColor = "#1a1a1a";
                }
              }}
              onMouseLeave={(e) => {
                if (currentSessionId !== session.id) {
                  e.currentTarget.style.backgroundColor = "transparent";
                }
              }}
            >
              {editingSessionId === session.id ? (
                <input
                  type="text"
                  value={editingTitle}
                  onChange={(e) => setEditingTitle(e.target.value)}
                  onBlur={() => handleRenameSession(session.id, editingTitle)}
                  onKeyPress={(e) =>
                    e.key === "Enter" &&
                    handleRenameSession(session.id, editingTitle)
                  }
                  className="w-full px-3 py-2 rounded-lg text-sm outline-none"
                  style={{ backgroundColor: "#2a2a2a", color: "#fff" }}
                  autoFocus
                />
              ) : (
                <div
                  onClick={() => setCurrentSessionId(session.id)}
                  className="flex items-center gap-2 px-3 py-2 cursor-pointer"
                >
                  <MessageSquare size={16} className="shrink-0" />
                  <span className="flex-1 text-sm truncate">
                    {session.title}
                  </span>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowMenu(showMenu === session.id ? null : session.id);
                    }}
                    className="opacity-0 group-hover:opacity-100 p-1 rounded"
                    style={{ backgroundColor: "transparent" }}
                    onMouseEnter={(e) =>
                      (e.currentTarget.style.backgroundColor = "#2a2a2a")
                    }
                    onMouseLeave={(e) =>
                      (e.currentTarget.style.backgroundColor = "transparent")
                    }
                  >
                    <MoreVertical size={16} />
                  </button>
                </div>
              )}

              {showMenu === session.id && (
                <div
                  className="absolute right-0 top-full mt-1 rounded-lg shadow-lg z-10 w-40"
                  style={{
                    backgroundColor: "#1a1a1a",
                    border: "1px solid #333",
                  }}
                >
                  <button
                    onClick={() => {
                      setEditingSessionId(session.id);
                      setEditingTitle(session.title);
                      setShowMenu(null);
                    }}
                    className="w-full flex items-center gap-2 px-3 py-2 text-sm"
                    onMouseEnter={(e) =>
                      (e.currentTarget.style.backgroundColor = "#2a2a2a")
                    }
                    onMouseLeave={(e) =>
                      (e.currentTarget.style.backgroundColor = "transparent")
                    }
                  >
                    <Edit2 size={14} />
                    Rename
                  </button>
                  <button
                    onClick={() => handleDeleteSession(session.id)}
                    className="w-full flex items-center gap-2 px-3 py-2 text-sm"
                    style={{ color: "#E43636" }}
                    onMouseEnter={(e) =>
                      (e.currentTarget.style.backgroundColor = "#2a2a2a")
                    }
                    onMouseLeave={(e) =>
                      (e.currentTarget.style.backgroundColor = "transparent")
                    }
                  >
                    <Trash2 size={14} />
                    Delete
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div
          className="px-4 py-3 flex items-center gap-3"
          style={{
            backgroundColor: "#E2DDB4",
            borderBottom: "1px solid #d4cda0",
          }}
        >
          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="p-2 rounded-lg"
            style={{ backgroundColor: "transparent" }}
            onMouseEnter={(e) =>
              (e.currentTarget.style.backgroundColor = "#d4cda0")
            }
            onMouseLeave={(e) =>
              (e.currentTarget.style.backgroundColor = "transparent")
            }
          >
            {sidebarOpen ? <X size={20} /> : <Menu size={20} />}
          </button>
          <h1 className="text-lg font-semibold" style={{ color: "#000000" }}>
            {currentSession?.title || "New Chat"}
          </h1>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto px-4 py-6">
          {currentSession?.messages.length === 0 ? (
            <div className="h-full flex items-center justify-center text-gray-400">
              <div className="text-center">
                <MessageSquare size={48} className="mx-auto mb-4 opacity-50" />
                <p className="text-lg">Start a new conversation</p>
              </div>
            </div>
          ) : (
            <div className="max-w-3xl mx-auto space-y-6">
              {currentSession?.messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-3 ${
                    message.sender === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                      message.sender === "user"
                        ? "bg-orange-500 text-white"
                        : "bg-white text-gray-800 border border-gray-200"
                    }`}
                  >
                    <p className="whitespace-pre-wrap">{message.text}</p>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          )}
        </div>

        {/* Input Area */}
        <div className="border-t border-gray-200 bg-white px-4 py-4">
          <div className="max-w-3xl mx-auto">
            <div className="flex gap-3 items-end">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Type your message..."
                rows={1}
                className="flex-1 resize-none rounded-xl border border-gray-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                style={{ maxHeight: "200px" }}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim()}
                className="p-3 bg-orange-500 text-white rounded-xl hover:bg-orange-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                <Send size={20} />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
